/* Generated By:JavaCC: Do not edit this line. MiniJavaConstants.java */
package gramatica;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniJavaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CLASS = 9;
  /** RegularExpression Id. */
  int FIM = 10;
  /** RegularExpression Id. */
  int PUBLIC = 11;
  /** RegularExpression Id. */
  int STATIC = 12;
  /** RegularExpression Id. */
  int VOID = 13;
  /** RegularExpression Id. */
  int MAIN = 14;
  /** RegularExpression Id. */
  int STRING = 15;
  /** RegularExpression Id. */
  int EXTENDS = 16;
  /** RegularExpression Id. */
  int RETURN = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int BOOLEAN = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int SOP = 23;
  /** RegularExpression Id. */
  int LENGTH = 24;
  /** RegularExpression Id. */
  int TRUE = 25;
  /** RegularExpression Id. */
  int FALSE = 26;
  /** RegularExpression Id. */
  int THIS = 27;
  /** RegularExpression Id. */
  int NEW = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int LCHAVE = 31;
  /** RegularExpression Id. */
  int RCHAVE = 32;
  /** RegularExpression Id. */
  int LCOLCHETE = 33;
  /** RegularExpression Id. */
  int RCOLCHETE = 34;
  /** RegularExpression Id. */
  int PONTO = 35;
  /** RegularExpression Id. */
  int VIRGULA = 36;
  /** RegularExpression Id. */
  int PVIRGULA = 37;
  /** RegularExpression Id. */
  int EXCL = 38;
  /** RegularExpression Id. */
  int SUM = 39;
  /** RegularExpression Id. */
  int SUB = 40;
  /** RegularExpression Id. */
  int IGUAL = 41;
  /** RegularExpression Id. */
  int MULTI = 42;
  /** RegularExpression Id. */
  int LESSTHAN = 43;
  /** RegularExpression Id. */
  int AND = 44;
  /** RegularExpression Id. */
  int DIGIT = 45;
  /** RegularExpression Id. */
  int MIN_LET = 46;
  /** RegularExpression Id. */
  int MAI_LET = 47;
  /** RegularExpression Id. */
  int LET = 48;
  /** RegularExpression Id. */
  int UNDERSCORE = 49;
  /** RegularExpression Id. */
  int ID = 50;
  /** RegularExpression Id. */
  int NUM = 51;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int singlelinecomment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"//\"",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"class\"",
    "\"$\"",
    "\"public\"",
    "\"static\"",
    "\"void\"",
    "\"main\"",
    "\"String\"",
    "\"extends\"",
    "\"return\"",
    "\"int\"",
    "\"boolean\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"System.out.println\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"this\"",
    "\"new\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\";\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\"*\"",
    "\"<\"",
    "\"&&\"",
    "<DIGIT>",
    "<MIN_LET>",
    "<MAI_LET>",
    "<LET>",
    "\"_\"",
    "<ID>",
    "<NUM>",
  };

}
